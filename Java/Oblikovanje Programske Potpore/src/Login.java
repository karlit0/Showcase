/*
 * Login.java
 *
 * Created on 18.12.2013., 14:58:43
 */

/*
 * (Ines A., 18.12.2013.) = kreiranje paketa i postavljanje elemenata na login screen;
 *               generiranje ActionPerformed i komentiranje što koji dio koda
 *               radi
 *
 * (Ines A., 31.12.2013.) = Implementacija SignIn gumbića
 */
package pagru_v05;

import java.lang.*;
import javax.swing.*;
import java.net.*;
import java.io.*;

/**
 *
 * @author MadHatress
 */

public class Login extends javax.swing.JFrame {
    
    private static Socket socket = null;
    private static DataOutputStream streamOut = null;
    private static DataInputStream streamIn = null;
    private LoginThread loginThread = null;
    private RegisterWin reg = null;

    /** Creates new form Login */
    public Login() {
        initComponents();
        setTitle("Zlatna ribica");
        /*
        napravit konekciju sa serverom
        */
        String servername = "0.0.0.0"; /* pretpostavljen localhost */
        int port = 1000; /* pretpostavljeno da server slusa na portu 23456 */
        try {
            socket = new Socket(servername, port);
            streamOut = new DataOutputStream(socket.getOutputStream());
            streamIn = new DataInputStream(socket.getInputStream());
            
        } catch (UnknownHostException uhe) {
            System.err.println("Host unknown " + uhe.getMessage());
            System.exit(0);
        } catch (IOException ioe) {
            System.err.println("Unexpected exception; " + ioe.getMessage());
            System.exit(0);
        }
        
        loginThread = new LoginThread(this, socket);
        loginThread.start();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        WelcomeLabel = new javax.swing.JLabel();
        UsernameLoginLabel = new javax.swing.JLabel();
        PasswordLoginLabel = new javax.swing.JLabel();
        UsernameLogin = new javax.swing.JTextField();
        SignInButton = new javax.swing.JButton();
        RegisterButton = new javax.swing.JButton();
        PasswordLogin = new javax.swing.JPasswordField();
        SetSocket = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        WelcomeLabel.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        WelcomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        WelcomeLabel.setText("Welcome!");

        UsernameLoginLabel.setText("Username:");

        PasswordLoginLabel.setText("Password:");

        UsernameLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsernameLoginActionPerformed(evt);
            }
        });

        SignInButton.setText("Sign in");
        SignInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignInButtonActionPerformed(evt);
            }
        });

        RegisterButton.setText("Register");
        RegisterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterButtonActionPerformed(evt);
            }
        });

        PasswordLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordLoginActionPerformed(evt);
            }
        });

        SetSocket.setText("Set Socket");
        SetSocket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetSocketActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RegisterButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SetSocket)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(UsernameLoginLabel)
                    .addComponent(PasswordLoginLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PasswordLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(WelcomeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(UsernameLogin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                .addContainerGap(111, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(160, Short.MAX_VALUE)
                .addComponent(SignInButton)
                .addGap(150, 150, 150))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(WelcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UsernameLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UsernameLoginLabel))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PasswordLoginLabel)
                    .addComponent(PasswordLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(SignInButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegisterButton)
                    .addComponent(SetSocket))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UsernameLoginActionPerformed(java.awt.event.ActionEvent evt) {                                                    
    }                                             
        
    
    public void handle(String msg) {
        System.out.println("Idem handleat ovaj msg: " + msg);
        if (msg.equals("REGISTEROK")) { /*  otvori onaj dialog koji kaze successful registration */
            SuccessRegister dialog = new SuccessRegister();
            dialog.setVisible(true);            
            if (reg != null)
            	reg.dispose();
        }
        else if (msg.equals("OKADMIN")) {
            AdminWindow window = new AdminWindow(socket, UsernameLogin.getText());
            loginThread.setStopper(true);
            /* kada je uspjesan login, zaustavi loginThread 
            koji slusa odgovor od servera (ali socket ostaje otvoren!) */                        
            dispose();            // rjesi se ovog prozora          
            window.setVisible(true);
        }
        else if (msg.equals("OK")) {
            MainWindow window = new MainWindow(socket, UsernameLogin.getText());
            loginThread.setStopper(true);
            /* kada je uspjesan login, zaustavi loginThread 
                                koji slusa odgovor od servera (ali socket ostaje otvoren!) */                        
            dispose();            // rjesi se ovog prozora
            window.setVisible(true);
        }
        else if (msg.equals("REGISTERFAIL")) {
        	try { /* provjera za slucaj lose definiranog puta za sliku */
        	WarningRegister warnReg = new WarningRegister(new javax.swing.JFrame(), true);
        	warnReg.setVisible(true);
        	} catch (Exception e) {        		
        	}
        }
        else {
        	try { /* provjera za slucaj lose definiranog puta za sliku */
            WarningLogin warnLog = new WarningLogin(new javax.swing.JFrame(), true);
            warnLog.setVisible(true);
        	} catch (Exception e) {        		
        	}
        }
    }
    
    private void SignInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignInButtonActionPerformed

        /* username i password spojit u jedan string s delimiterom " ",
            prije toga nadodat kljucnu rijec "log"
            taj string se parsira na strani servera i server provjerava jel zadovoljava username i password
            (odgovor od servera slusa LoginThread koji salje odgovor Login-u preko handle metode)
        */
        String username = UsernameLogin.getText();
        String password = PasswordLogin.getText();
        String user_pass = "LOG" + " " + username + " " + password;
                       
        try {
            streamOut.writeUTF(user_pass);
        } catch (IOException ioe) {
            System.err.println("Sending error: " + ioe.getMessage());
            System.exit(0);
        }           
    }//GEN-LAST:event_SignInButtonActionPerformed
        
    public synchronized void send(String msg) {
	 try {
            streamOut.writeUTF(msg);
        } catch (IOException ioe) {
            System.err.println("Sending error: " + ioe.getMessage());
            System.exit(0);
        }  
	}
		
    private void RegisterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterButtonActionPerformed
        /*  slicno kao kod signin, jedino u String koji se prosljedjuje streamu
            nadodat kljucnu rijec npr "reg" prije toga, pa onda sa strane servera
            radit provjeru jel tokens.length == 3
        */

        reg = new RegisterWin(new javax.swing.JFrame(), true, Login.this);
        reg.setVisible(true);
        
        /*String username = UsernameLogin.getText();
        String password = PasswordLogin.getText();
        String register_string = "REG" + " " + username + " " + password;
                       
        try {
            streamOut.writeUTF(register_string);
        } catch (IOException ioe) {
            System.err.println("Sending error: " + ioe.getMessage());
            System.exit(0);
        } 
        */
    }//GEN-LAST:event_RegisterButtonActionPerformed

        
        
    private void PasswordLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordLoginActionPerformed
    }//GEN-LAST:event_PasswordLoginActionPerformed

    private void SetSocketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetSocketActionPerformed
       SetSocket ssocket = new SetSocket(new javax.swing.JFrame(), true);
       ssocket.setVisible(true);
    }//GEN-LAST:event_SetSocketActionPerformed

  
    public void stop() {
        try {
            if (streamOut != null)  streamOut.close();
            if (socket != null)     socket.close();
        } catch (IOException ioe) {
            System.err.println("Error closing ...");
            System.exit(0);
        }
        loginThread.close();        
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Login dialog = new Login();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        try {
                        if (streamOut != null)  streamOut.close();
                        if (socket != null)     socket.close();
                        } catch (IOException ioe) {
                            System.out.println("Error closing ...");
                        }
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField PasswordLogin;
    private javax.swing.JLabel PasswordLoginLabel;
    private javax.swing.JButton RegisterButton;
    private javax.swing.JButton SetSocket;
    private javax.swing.JButton SignInButton;
    private javax.swing.JTextField UsernameLogin;
    private javax.swing.JLabel UsernameLoginLabel;
    private javax.swing.JLabel WelcomeLabel;
    // End of variables declaration//GEN-END:variables

}
